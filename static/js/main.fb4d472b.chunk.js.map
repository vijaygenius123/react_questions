{"version":3,"sources":["components/Question.js","components/Arrows.js","constants/questions.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","useState","selected","setSelected","title","choices","image","preSelected","handleSelection","useEffect","className","src","alt","map","choice","key","id","type","onChange","name","answer","value","checked","htmlFor","Arrows","index","length","handleArrowsChange","handleCompletion","onClick","e","questions","score","Results","handleReset","reduce","prev","current","filter","q","App","setState","complete","selectedChoice","state","newSelections","sel","i","newIndex","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAmDeA,MAhDf,SAAkBC,GAAQ,IAAD,EACWC,mBAAS,MADpB,mBACdC,EADc,KACJC,EADI,KAEbC,EAAwDJ,EAAxDI,MAAOC,EAAiDL,EAAjDK,QAASC,EAAwCN,EAAxCM,MAAOC,EAAiCP,EAAjCO,YAAaC,EAAoBR,EAApBQ,gBAM5C,OAJAC,qBAAU,WACNN,EAAYI,KACb,CAACA,IAGA,6BACI,yBAAKG,UAAU,YACX,4BAAKN,IAET,yBAAKM,UAAU,UACX,yBAAKA,UAAU,SACX,yBAAKC,IAAG,UAAKL,GAASM,IAAKN,KAE/B,yBAAKI,UAAU,WACX,8BACKL,EAAQQ,KAAI,SAAAC,GACT,OACI,yBAAKC,IAAKD,EAAOE,GAAIN,UAAU,UAC3B,2BAAOO,KAAK,QACRC,SAAU,kBAAMV,EAAgBM,EAAOE,KACvCA,GAAIF,EAAOE,GACXG,KAAML,EAAOM,OACbC,MAAOP,EAAOE,GACdM,QAASpB,IAAaY,EAAOE,KAEjC,2BAAOO,QAAST,EAAOM,QAAvB,IAAiCN,EAAOM,iBCE7DI,MA/Bf,SAAgBxB,GAAQ,IACZyB,EAAwDzB,EAAxDyB,MAAOC,EAAiD1B,EAAjD0B,OAAQC,EAAyC3B,EAAzC2B,mBAAoBC,EAAqB5B,EAArB4B,iBAC3C,OACI,yBAAKlB,UAAU,iBACA,IAAVe,EAAc,kCACX,6BACI,wBAAII,QAAS,SAACC,GAAD,OAAOH,EAAmBG,EAAGL,EAAQ,KAAlD,QAIPA,IAAUC,EACN,yBAAKG,QAASD,GAAkB,yCAEhC,6BAAK,4BAAKH,EAAQ,EAAb,IAAiBC,EAAS,IAEnCD,IAAUC,EAAS,kCAChB,6BACI,wBAAIG,QAAS,SAACC,GAAD,OAAOH,EAAmBG,EAAGL,EAAQ,KAAlD,UCpBPM,EAAY,CACrB,CACIf,GAAI,EACJZ,MAAO,oCACPC,QAAS,CACL,CAAEW,GAAI,EAAGI,OAAQ,yBAA0BY,MAAO,GAClD,CAAEhB,GAAI,EAAGI,OAAQ,0BAA2BY,MAAO,GACnD,CAAEhB,GAAI,EAAGI,OAAQ,4BAA6BY,MAAO,GACrD,CAAEhB,GAAI,EAAGI,OAAQ,mBAAoBY,MAAO,IAEhD1B,MAAO,iBAEX,CACIU,GAAI,EACJZ,MAAO,oDACPC,QAAS,CACL,CAAEW,GAAI,EAAGI,OAAQ,SAAUY,MAAO,GAClC,CAAEhB,GAAI,EAAGI,OAAQ,UAAWY,MAAO,GACnC,CAAEhB,GAAI,EAAGI,OAAQ,QAASY,MAAO,GACjC,CAAEhB,GAAI,EAAGI,OAAQ,SAAUY,MAAO,IAEtC1B,MAAO,iBAEX,CACIU,GAAI,EACJZ,MAAO,iCACPC,QAAS,CACL,CAAEW,GAAI,EAAGI,OAAQ,MAAOY,MAAO,GAC/B,CAAEhB,GAAI,EAAGI,OAAQ,KAAMY,MAAO,IAC9B,CAAEhB,GAAI,EAAGI,OAAQ,MAAOY,MAAO,GAC/B,CAAEhB,GAAI,EAAGI,OAAQ,KAAMY,MAAO,KAElC1B,MAAO,kBCDA2B,MA1Bf,SAAiBjC,GAAQ,IACbE,EAA0BF,EAA1BE,SAAUgC,EAAgBlC,EAAhBkC,YAEZF,EAAQ9B,EAASiC,QAAO,SAACC,EAAMC,EAASZ,GAC1C,OAAgB,OAAZY,EACO,EAGAD,EADcL,EAAUN,GAAOpB,QAAQiC,QAAO,SAAAC,GAAC,OAAIA,EAAEvB,KAAOqB,KACxC,GAAGL,QAEnC,GACH,OACI,6BACI,6BACI,6CAAmBA,GACnB,4BAAQH,QAASK,GAAjB,YCkEDM,E,kDA7Eb,WAAYxC,GAAQ,IAAD,8BACjB,cAAMA,IAYR2B,mBAAqB,SAACG,EAAGL,GACvB,EAAKgB,SAAS,CAAEhB,WAdC,EAiBnBG,iBAAmB,SAACE,GAClB,EAAKW,SAAS,CAAEC,UAAU,KAlBT,EAqBnBR,YAAc,SAACJ,GACb,EAAKW,SAAS,CACZhB,MAAO,EACPiB,UAAU,EACVxC,SAAU6B,EAAUlB,KAAI,SAAA0B,GAAC,OAAI,WAzBd,EA8BnB/B,gBAAkB,SAACmC,GAAoB,IAC7BlB,EAAU,EAAKmB,MAAfnB,MACFoB,EAAgB,EAAKD,MAAM1C,SAASW,KAAI,SAACiC,EAAKC,GAClD,OAAIA,IAAM,EAAKH,MAAMnB,MACZkB,EACGG,KAEd,GAAIrB,IAAUM,EAAUL,OAAS,EAC/B,EAAKe,SAAS,CACZvC,SAAU2C,EACVH,UAAU,QAGT,CACH,IAAMM,EAAWvB,EAAQ,EACzB,EAAKgB,SAAS,CACZvC,SAAU2C,EACVpB,MAAOuB,MA7CX,EAAKJ,MAAQ,CACXnB,MAAO,EACPvB,SAAU,GACVwC,UAAU,GALK,E,gEAUjBO,KAAKR,SAAS,CAAEvC,SAAU6B,EAAUlB,KAAI,SAAA0B,GAAC,OAAI,Y,+BA0CrC,IAAD,EAC+BU,KAAKL,MAAnCnB,EADD,EACCA,MAAOvB,EADR,EACQA,SAAUwC,EADlB,EACkBA,SACzB,OACE,yBAAKhC,UAAU,OAEVgC,EAaG,kBAAC,EAAD,CAASxC,SAAUA,EAAUgC,YAAae,KAAKf,cAZjD,6BACE,kBAAC,EAAD,iBAAcH,EAAUN,GAAxB,CACElB,YAAaL,EAASuB,GACtBjB,gBAAiByC,KAAKzC,mBAExB,kBAAC,EAAD,CAAQiB,MAAOA,EAAOC,OAAQK,EAAUL,OAAS,EAC/CC,mBAAoBsB,KAAKtB,mBACzBC,iBAAkBqB,KAAKrB,yB,GAnErBsB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fb4d472b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Question(props) {\n    const [selected, setSelected] = useState(null)\n    const { title, choices, image, preSelected, handleSelection } = props;\n\n    useEffect(() => {\n        setSelected(preSelected)\n    }, [preSelected])\n\n    return (\n        <div>\n            <div className='question'>\n                <h1>{title}</h1>\n            </div>\n            <div className='answer'>\n                <div className='image'>\n                    <img src={`${image}`} alt={image} />\n                </div>\n                <div className='choices'>\n                    <form>\n                        {choices.map(choice => {\n                            return (\n                                <div key={choice.id} className='choice'>\n                                    <input type='radio'\n                                        onChange={() => handleSelection(choice.id)}\n                                        id={choice.id}\n                                        name={choice.answer}\n                                        value={choice.id}\n                                        checked={selected === choice.id}\n                                    />\n                                    <label htmlFor={choice.answer}> {choice.answer}</label>\n                                </div>\n                            )\n                        })}\n                    </form>\n                </div>\n            </div>\n        </div >\n    )\n}\n\nQuestion.propTypes = {\n    title: PropTypes.string,\n    image: PropTypes.string,\n    choices: PropTypes.array,\n    handleSelection: PropTypes.func,\n    preSelected: PropTypes.number\n}\n\nexport default Question\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Arrows(props) {\n    const { index, length, handleArrowsChange, handleCompletion } = props;\n    return (\n        <div className='arrow-wrapper'>\n            {index === 0 ? <div> </div> :\n                <div>\n                    <h1 onClick={(e) => handleArrowsChange(e, index - 1)}> &lt; </h1>\n                </div>\n            }\n\n            {index === length ?\n                (<div onClick={handleCompletion}><h2>Complete</h2></div>)\n                :\n                (<div><h2>{index + 1}/{length + 1}</h2></div>)\n            }\n            {index === length ? <div> </div> :\n                <div>\n                    <h1 onClick={(e) => handleArrowsChange(e, index + 1)}> &gt; </h1>\n                </div>\n            }\n        </div >\n    )\n}\n\nArrows.propTypes = {\n    index: PropTypes.number,\n    length: PropTypes.number,\n    handleArrowsChange: PropTypes.func,\n    handleCompletion: PropTypes.func\n}\n\nexport default Arrows\n\n","export const questions = [\n    {\n        id: 1,\n        title: 'Which Is The Home Ground For CSK?',\n        choices: [\n            { id: 1, answer: 'M. Chinnaswamy Stadium', score: 1 },\n            { id: 2, answer: 'Feroz Shah Kotla Ground', score: 0 },\n            { id: 3, answer: 'M. A. Chidambaram Stadium', score: 0 },\n            { id: 4, answer: 'Wankhede Stadium', score: 0 }\n        ],\n        image: 'images/Q1.jpg'\n    },\n    {\n        id: 2,\n        title: 'The Eden Garden Cricket Stadium Is In Which City?',\n        choices: [\n            { id: 1, answer: 'Mumbai', score: 0 },\n            { id: 2, answer: 'Kolkata', score: 1 },\n            { id: 3, answer: 'Delhi', score: 0 },\n            { id: 4, answer: 'Kerala', score: 0 }\n        ],\n        image: 'images/Q2.jpg'\n    },\n    {\n        id: 3,\n        title: 'Which Team Is The Best In IPL?',\n        choices: [\n            { id: 1, answer: 'CSK', score: 1 },\n            { id: 2, answer: 'MI', score: 0.3 },\n            { id: 3, answer: 'RCB', score: 0 },\n            { id: 4, answer: 'RR', score: 0.2 }\n        ],\n        image: 'images/Q3.jpg'\n    },\n]","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { questions } from '../constants/questions'\n\n\nfunction Results(props) {\n    const { selected, handleReset } = props\n\n    const score = selected.reduce((prev, current, index) => {\n        if (current === null)\n            return 0\n        else {\n            const currentScore = questions[index].choices.filter(q => q.id === current)\n            return prev + currentScore[0].score\n        }\n    }, 0)\n    return (\n        <div>\n            <div>\n                <h2>Your Score Is {score}</h2>\n                <button onClick={handleReset}>Reset</button>\n            </div>\n        </div>\n    )\n}\n\nResults.propTypes = {\n    selected: PropTypes.array,\n    handleReset: PropTypes.func\n}\n\nexport default Results\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question'\nimport Arrows from './components/Arrows'\nimport { questions } from './constants/questions'\nimport Results from './components/Results';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 0,\n      selected: [],\n      complete: false\n    }\n  }\n\n  componentDidMount() {\n    this.setState({ selected: questions.map(q => null) })\n  }\n\n  handleArrowsChange = (e, index) => {\n    this.setState({ index })\n  }\n\n  handleCompletion = (e) => {\n    this.setState({ complete: true })\n  }\n\n  handleReset = (e) => {\n    this.setState({\n      index: 0,\n      complete: false,\n      selected: questions.map(q => null)\n    })\n  }\n\n\n  handleSelection = (selectedChoice) => {\n    const { index } = this.state\n    const newSelections = this.state.selected.map((sel, i) => {\n      if (i === this.state.index)\n        return selectedChoice\n      else return sel\n    })\n    if (index === questions.length - 1) {\n      this.setState({\n        selected: newSelections,\n        complete: true\n      })\n    }\n    else {\n      const newIndex = index + 1;\n      this.setState({\n        selected: newSelections,\n        index: newIndex\n      })\n    }\n  }\n\n  render() {\n    const { index, selected, complete } = this.state;\n    return (\n      <div className=\"App\" >\n        {\n          !complete ? (\n            <div>\n              <Question {...questions[index]}\n                preSelected={selected[index]}\n                handleSelection={this.handleSelection}\n              />\n              <Arrows index={index} length={questions.length - 1}\n                handleArrowsChange={this.handleArrowsChange}\n                handleCompletion={this.handleCompletion} />\n            </div>\n          )\n            :\n            (\n              <Results selected={selected} handleReset={this.handleReset} />\n            )\n        }\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}